// Code generated by MockGen. DO NOT EDIT.
// Source: traffic_log.go

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrafficLogger is a mock of TrafficLogger interface.
type MockTrafficLogger struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficLoggerMockRecorder
}

// MockTrafficLoggerMockRecorder is the mock recorder for MockTrafficLogger.
type MockTrafficLoggerMockRecorder struct {
	mock *MockTrafficLogger
}

// NewMockTrafficLogger creates a new mock instance.
func NewMockTrafficLogger(ctrl *gomock.Controller) *MockTrafficLogger {
	mock := &MockTrafficLogger{ctrl: ctrl}
	mock.recorder = &MockTrafficLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficLogger) EXPECT() *MockTrafficLoggerMockRecorder {
	return m.recorder
}

// LogRequest mocks base method.
func (m *MockTrafficLogger) LogRequest(tr *RequestTrafficLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRequest", tr)
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockTrafficLoggerMockRecorder) LogRequest(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockTrafficLogger)(nil).LogRequest), tr)
}

// LogResponse mocks base method.
func (m *MockTrafficLogger) LogResponse(tr *ResponseTrafficLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogResponse", tr)
}

// LogResponse indicates an expected call of LogResponse.
func (mr *MockTrafficLoggerMockRecorder) LogResponse(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogResponse", reflect.TypeOf((*MockTrafficLogger)(nil).LogResponse), tr)
}
